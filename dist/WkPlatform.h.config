/* *
 *  Copyright (c) 2009, Asmodehn's Corp.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *      - Redistributions of source code must retain the above copyright notice,
 * 	    this list of conditions and the following disclaimer.
 *      - Redistributions in binary form must reproduce the above copyright
 * 		notice, this list of conditions and the following disclaimer in the
 * 	    documentation and/or other materials provided with the distribution.
 *      - either the name of the Asmodehn's Corp. nor the names of its
 * 	    contributors may be used to endorse or promote products derived
 * 	    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 *  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 *  THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef WKPLATFORM_HH
#define WKPLATFORM_HH

/* Platform type detection, CMake Based */

#cmakedefine WK_PLATFORM "@WK_PLATFORM@"

#cmakedefine WK_PLATFORM_IS_WIN32
#cmakedefine WK_PLATFORM_IS_APPLE
#cmakedefine WK_PLATFORM_IS_UNIX

/* Advanced System detection, CMake based */

#cmakedefine WK_SYSTEM_NAME "@WK_SYSTEM_NAME@"
#cmakedefine WK_SYSTEM_VERSION "@WK_SYSTEM_VERSION@"
#cmakedefine WK_SYSTEM_PROCESSOR "@WK_SYSTEMPROCESSOR@"

#cmakedefine WK_SYSTEM_IS_WINDOWS
#cmakedefine WK_SYSTEM_IS_MACOSX
#cmakedefine WK_SYSTEM_IS_LINUX

/* Compiler type detection, CMake based */

#cmakedefine WK_COMPILER "@WK_COMPILER@"

#cmakedefine WK_COMPILER_IS_MSVC
#cmakedefine WK_COMPILER_IS_GNUCC
#cmakedefine WK_COMPILER_IS_GNUCXX

/*adjusting declspec values*/

/* Generic helper definitions for shared library support */
#if defined(WK_PLATFORM_IS_WIN32)
#define WK_HELPER_DLL_IMPORT __declspec(dllimport)
#define WK_HELPER_DLL_EXPORT __declspec(dllexport)
#define WK_HELPER_DLL_LOCAL
#else
#if defined(WK_COMPILER_IS_GNUCC) && (__GNUC__ >= 4)
#define WK_HELPER_DLL_IMPORT __attribute__ ((visibility("default")))
#define WK_HELPER_DLL_EXPORT __attribute__ ((visibility("default")))
#define WK_HELPER_DLL_LOCAL  __attribute__ ((visibility("hidden")))
#else
#define WK_HELPER_DLL_IMPORT
#define WK_HELPER_DLL_EXPORT
#define WK_HELPER_DLL_LOCAL
#endif
#endif



/*
 Now we use the generic helper definitions above to define WK_API and WK_LOCAL.
 WK_API is used for the public API symbols. It either DLL imports or DLL exports (or does nothing for static build)
 WK_LOCAL is used for non-api symbols.
*/

#ifdef WK_SHAREDLIB_BUILD /* defined if The library is compiled as a DLL */
#ifdef WK_SHAREDLIB_IMPORT /* defined if we import the library (instead of building it) */
#define WK_API WK_HELPER_DLL_IMPORT
#else
#define WK_API WK_HELPER_DLL_EXPORT
#endif /* WK_SHAREDLIB_IMPORT */
#define WK_LOCAL WK_HELPER_DLL_LOCAL
#else /* WK_SHAREDLIB_BUILD is not defined: this means the library is a static lib. */
#define WK_API
#define WK_LOCAL
#endif /* WK_SHAREDLIB_BUILD */

/* For backward compatibility */
#define WK_DECLSPEC WK_API

#ifndef NULL
#define NULL 0
#endif

/* Project detection */

#cmakedefine PROJECT_NAME "@PROJECT_NAME@"

/* Dependency detection, Important to propagate build configuration of libraries... */
/* NB : This must be in sync with WkUtils.cmake macros and variables naming conventions... */
#cmakedefine WK_SDLIMAGE_FOUND
#cmakedefine WK_SDLMIXER_FOUND
#cmakedefine WK_SDLTTF_FOUND
#cmakedefine WK_SDLNET_FOUND
#cmakedefine WK_OPENGL_FOUND
#cmakedefine WK_GUICHAN_FOUND

/* Basic C function to display Wk Configuration on runtime */
#include <stdio.h>

WK_LOCAL int WkDebug()
{
    printf ( "This is %s !\n", PROJECT_NAME );
    printf ( "WkCMake has detected this configuration :\n" );
    printf ( "Platform : %s\n", WK_PLATFORM );
    printf ( "System : %s %s %s\n", WK_SYSTEM_NAME, WK_SYSTEM_VERSION, WK_SYSTEM_PROCESSOR );
    printf ( "Compiler : %s\n", WK_COMPILER );
    printf ( "WkCMake has detected the following dependencies :\n");
#ifdef WK_SDLIMAGE_FOUND
    printf ( "- SDL_image\n" ) ;
#endif
#ifdef WK_SDLMIXER_FOUND
    printf ( "- SDL_mixer\n" );
#endif
#ifdef WK_SDLTTF_FOUND
    printf ( "- SDL_ttf\n" );
#endif
#ifdef WK_SDLNET_FOUND
    printf ( "- SDL_net\n" );
#endif
#ifdef WK_OPENGL_FOUND
    printf ( "- OpenGL\n" );
#endif
#ifdef WK_GUICHAN_FOUND
    printf ( "- GUIchan\n");
#endif

    return 0;
}


#endif /* WKPLATFORM_HH */
