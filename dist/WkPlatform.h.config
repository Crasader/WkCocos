/* *
 *  Copyright (c) 2009, Asmodehn's Corp.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *      - Redistributions of source code must retain the above copyright notice,
 * 	    this list of conditions and the following disclaimer.
 *      - Redistributions in binary form must reproduce the above copyright
 * 		notice, this list of conditions and the following disclaimer in the
 * 	    documentation and/or other materials provided with the distribution.
 *      - either the name of the Asmodehn's Corp. nor the names of its
 * 	    contributors may be used to endorse or promote products derived
 * 	    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 *  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 *  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 *  THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef WKPLATFORM_@PROJECT_NAME@_HH
#define WKPLATFORM_@PROJECT_NAME@_HH

/* Project detection */
@CMAKEDEFINE@ WK_@PROJECT_NAME@_PROJECT_NAME "${WK_@PROJECT_NAME@_PROJECT_NAME}"

/* Platform type detection, CMake Based */

@CMAKEDEFINE@ WK_@PROJECT_NAME@_PLATFORM "${WK_@PROJECT_NAME@_PLATFORM}"

@CMAKEDEFINE@ WK_@PROJECT_NAME@_PLATFORM_IS_WIN32
@CMAKEDEFINE@ WK_@PROJECT_NAME@_PLATFORM_IS_APPLE
@CMAKEDEFINE@ WK_@PROJECT_NAME@_PLATFORM_IS_UNIX

/* Advanced System detection, CMake based */

@CMAKEDEFINE@ WK_@PROJECT_NAME@_SYSTEM_NAME "${WK_@PROJECT_NAME@_SYSTEM_NAME}"
@CMAKEDEFINE@ WK_@PROJECT_NAME@_SYSTEM_VERSION "${WK_@PROJECT_NAME@_SYSTEM_VERSION}"
@CMAKEDEFINE@ WK_@PROJECT_NAME@_SYSTEM_PROCESSOR "${WK_@PROJECT_NAME@_SYSTEM_PROCESSOR}"

@CMAKEDEFINE@ WK_@PROJECT_NAME@_SYSTEM_IS_WINDOWS
@CMAKEDEFINE@ WK_@PROJECT_NAME@_SYSTEM_IS_MACOSX
@CMAKEDEFINE@ WK_@PROJECT_NAME@_SYSTEM_IS_LINUX

/* Compiler type detection, CMake based */

@CMAKEDEFINE@ WK_@PROJECT_NAME@_COMPILER "${WK_@PROJECT_NAME@_COMPILER}"

@CMAKEDEFINE@ WK_@PROJECT_NAME@_COMPILER_IS_MSVC
@CMAKEDEFINE@ WK_@PROJECT_NAME@_COMPILER_IS_GNUCC
@CMAKEDEFINE@ WK_@PROJECT_NAME@_COMPILER_IS_GNUCXX

/* Advanced Compiler Environment Detection */
@CMAKEDEFINE@ WK_@PROJECT_NAME@_HAS_UNISTD_H

#ifdef WK_@PROJECT_NAME@_HAS_UNISTD_H
 #define WK_@PROJECT_NAME@_PLATFORM_POSIX
#endif

/*adjusting declspec values*/

/* Generic helper definitions for shared library support */
#if defined(WK_@PROJECT_NAME@_PLATFORM_IS_WIN32)
#define WK_@PROJECT_NAME@_HELPER_DLL_IMPORT __declspec(dllimport)
#define WK_@PROJECT_NAME@_HELPER_DLL_EXPORT __declspec(dllexport)
#define WK_@PROJECT_NAME@_HELPER_DLL_LOCAL
#else
#if defined(WK_@PROJECT_NAME@_COMPILER_IS_GNUCC) && (__GNUC__ >= 4)
#define WK_@PROJECT_NAME@_HELPER_DLL_IMPORT __attribute__ ((visibility("default")))
#define WK_@PROJECT_NAME@_HELPER_DLL_EXPORT __attribute__ ((visibility("default")))
#define WK_@PROJECT_NAME@_HELPER_DLL_LOCAL  __attribute__ ((visibility("hidden")))
#else
#define WK_@PROJECT_NAME@_HELPER_DLL_IMPORT
#define WK_@PROJECT_NAME@_HELPER_DLL_EXPORT
#define WK_@PROJECT_NAME@_HELPER_DLL_LOCAL
#endif
#endif



/*
 Now we use the generic helper definitions above to define WK_API and WK_LOCAL.
 WK_API is used for the public API symbols. It either DLL imports or DLL exports (or does nothing for static build)
 WK_LOCAL is used for non-api symbols.
*/

#ifdef WK_@PROJECT_NAME@_SHAREDLIB_BUILD /* defined if The library is compiled as a DLL */
#ifdef WK_@PROJECT_NAME@_SHAREDLIB_IMPORT /* defined if we import the library (instead of building it) */
#define WK_@PROJECT_NAME@_API WK_@PROJECT_NAME@_HELPER_DLL_IMPORT
#else
#define WK_@PROJECT_NAME@_API WK_@PROJECT_NAME@_HELPER_DLL_EXPORT
#endif /* WK_@PROJECT_NAME@_SHAREDLIB_IMPORT */
#define WK_@PROJECT_NAME@_LOCAL WK_@PROJECT_NAME@_HELPER_DLL_LOCAL
#else /* WK_@PROJECT_NAME@_SHAREDLIB_BUILD is not defined: this means the library is a static lib. */
#define WK_@PROJECT_NAME@_API
#define WK_@PROJECT_NAME@_LOCAL
#endif /* WK_@PROJECT_NAME@_SHAREDLIB_BUILD */

#ifndef NULL
#define NULL 0
#endif

/* Dependency detection, Important to propagate build configuration of libraries... */
@CMAKEDEFINE@ WK_@PROJECT_NAME@_FOUND_STLPORT
/* NB : This must be in sync with WkUtils.cmake macros and variables naming conventions... */
@CMAKEDEFINE@ WK_@PROJECT_NAME@_FOUND_SDLIMAGE
@CMAKEDEFINE@ WK_@PROJECT_NAME@_FOUND_SDLMIXER
@CMAKEDEFINE@ WK_@PROJECT_NAME@_FOUND_SDLTTF
@CMAKEDEFINE@ WK_@PROJECT_NAME@_FOUND_SDLNET
@CMAKEDEFINE@ WK_@PROJECT_NAME@_FOUND_OPENGL
@CMAKEDEFINE@ WK_@PROJECT_NAME@_FOUND_GUICHAN


/* Set up for C function definitions, even when using C++ */
#ifdef __cplusplus
extern "C"
{
#endif

/* Basic C function to display Wk Configuration on runtime */
WK_@PROJECT_NAME@_LOCAL int WkDebug();

/* Ends C function definitions when using C++ */
#ifdef __cplusplus
}
#endif



#endif /* WKPLATFORM_@PROJECT_NAME@_HH */
