//reference : http://ph0b.com/android-studio-gradle-and-ndk-integration/
import groovy.transform.Field

@Field
def buildNumber = System.getenv("BUILD_VERSION")
if(buildNumber == null) {
    //dev build is lower versionCode
    // so there is no accident with accidentally uploading/downloading dev version.
    buildNumber = 0
}
else {
    buildNumber=buildNumber.toInteger()
}

apply plugin: 'android'

android {
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['src/main/libs'] // use the jni .so compiled from the manual ndk-build command
            jni.srcDirs = [] //disable automatic ndk-build call
        }
        test {

        }

    }

    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        //versionName can go up to "9.999.build"
        versionName "0.999." + buildNumber
        versionCode ((0*10000) + buildNumber) // max should be 2 147 483 647
    }

    flavorDimensions "api","abi"
    //api / abi versions will be on the top 10**8 units of versionCode. that is 20 units to share

    productFlavors {
        gingerbread {
            flavorDimension "api"
            minSdkVersion 10
            versionCode = 00
        }
//TMP remove : we dont have need for ICS build
//        icecreamSandwich {
//            flavorDimension "api"
//            minSdkVersion 14
//            versionCode = 10
//        }
        //there is space for another API specialization at versionCode 20
//TMP remove : we dont have need for x86 only build
//        x86 {
//            flavorDimension "abi"
//            ndk {
//                abiFilter "x86"
//            }
//            // this is the flavor part of the version code.
//            // It must be higher than the arm one for devices supporting
//            // both, as x86 is preferred.
//            versionCode = 3
//        }
//TMP remove : we dont have need for ARM only build
//        arm {
//            flavorDimension "abi"
//            ndk {
//                abiFilter "armeabi-v7a"
//            }
//            versionCode = 2
//        }
//TMP remove : we dont have need for mips only build
//        mips {
//            flavorDimension "abi"
//            ndk {
//                abiFilter "mips"
//            }
//            versionCode = 1
//        }
        fat {
            flavorDimension "abi"
            //supported cocos ABI
            ndk {
                abiFilters "armeabi-v7a", "x86"
            }
            // fat binary, lowest version code to be
            // the last option
            versionCode = 0
        }
    }

    signingConfigs {
        release {
            storeFile file("mykeystore") //replaced if validateReleaseSigning is in task graph
            storePassword "" //interactive prompt will fill this up
            keyAlias "wkcocos"
            keyPassword "" //interactive prompt will fill this up
        }
    }

    buildTypes {
        debug {
            //BEWARE : this changes package name as well ! comment it for testing anything related to google play.
            applicationIdSuffix ".debug"
            debuggable true
            //TODO : use versionNameSuffix
            jniDebuggable true
        }
        release {
            debuggable false
            //TODO : use versionNameSuffix
            jniDebuggable false
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    // make per-variant version code
    applicationVariants.all { variant ->
        //TODO : different build settings for different variants
        if ( variant.buildType.jniDebuggable ) {
            println variant.name + ' is jniDebuggable '
            variant.javaCompile.dependsOn ndkCustomBuildDebug
        } else {
            //making ndkbuild a release build
            println variant.name + ' is NOT jniDebuggable '
            variant.javaCompile.dependsOn ndkCustomBuildRelease
        }

        variant.outputs.each { output ->
            output.outputFile = new File(output.outputFile.parent, output.outputFile.name.replace("testapp-", "wkcocos-").replace(".apk", "-" + defaultConfig.versionName + ".apk"))
        }
        // get the version code of each flavor
        def apiVersion = variant.productFlavors.get(0).versionCode
        def abiVersion = variant.productFlavors.get(1).versionCode

        // set the composite code
        variant.mergedFlavor.versionCode = (apiVersion + abiVersion) * 100000000 + defaultConfig.versionCode
    }

}


task cleanNdkLibs(type: Delete) {
  //we need to manually delete the binary produced by NDK because they are not cleaned by NDK, and debug and release override each other
  //TODO : check : maybe not true since it was probably a NDK/build-tools bug in a previous version...
  delete fileTree(dir:"src/main/obj/local/").include("**/*.a").include("**/*.so")
}

task ndkCustomBuildDebug(type: Exec, dependsOn: ['cleanNdkLibs']) {
    //windows only
    def dependsDir = file('../../depends').absolutePath
    def cpus = Runtime.runtime.availableProcessors()
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        //windows
        commandLine 'cmd', '/c', 'ndk-build', 'NDK_DEBUG=1', 'V=1', '-j', cpus, '-C', file('src/main/jni').absolutePath, 'NDK_MODULE_PATH=' + file('..').absolutePath + ';' + dependsDir + ';' + dependsDir + '\\cocos2dx-store\\submodules;' + dependsDir + '\\cocos2dx-store\\submodules\\soomla-cocos2dx-core\\submodules;' + dependsDir + '\\cocos2d-x;' + dependsDir + '\\cocos2d-x\\external;' + dependsDir + '\\cocos2d-x\\external-bin;' + dependsDir + '\\cocos2d-x\\cocos'
    } else {
        commandLine 'ndk-build', 'NDK_DEBUG=1', 'V=1', '-j', cpus, '-C', file('src/main/jni').absolutePath, 'NDK_MODULE_PATH=' + file('..').absolutePath + ':' + dependsDir + ':' + dependsDir + '/cocos2dx-store/submodules:' + dependsDir + '/cocos2dx-store/submodules/soomla-cocos2dx-core/submodules:' + dependsDir + '/cocos2d-x:' + dependsDir + '/cocos2d-x/external:' + dependsDir + '/cocos2d-x/external-bin:' + dependsDir + '/cocos2d-x/cocos'
    }

    //run after commandLine executes
    doLast{

    }
}

task cleanNdkCustomBuildDebug(type: Exec) {
    //windows only
    def dependsDir = file('../../depends').absolutePath
    def cpus = Runtime.runtime.availableProcessors()

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        //windows
        commandLine 'cmd', '/c', 'ndk-build', 'NDK_DEBUG=1', 'clean', '-j', cpus, '-C', file('src/main/jni').absolutePath, 'NDK_MODULE_PATH=' + file('..').absolutePath + ';' + dependsDir + ';' + dependsDir + '\\cocos2dx-store\\submodules;' + dependsDir + '\\cocos2dx-store\\submodules\\soomla-cocos2dx-core\\submodules;' + dependsDir + '\\cocos2d-x;' + dependsDir + '\\cocos2d-x\\external;' + dependsDir + '\\cocos2d-x\\external-bin;' + dependsDir + '\\cocos2d-x\\cocos'
    } else {
        commandLine 'ndk-build', 'NDK_DEBUG=1', 'clean', '-j', cpus, '-C', file('src/main/jni').absolutePath, 'NDK_MODULE_PATH=' + file('..').absolutePath + ':' + dependsDir + ':' + dependsDir + '/cocos2dx-store/submodules:' + dependsDir + '/cocos2dx-store/submodules/soomla-cocos2dx-core/submodules:' + dependsDir + '/cocos2d-x:' + dependsDir + '/cocos2d-x/external:' + dependsDir + '/cocos2d-x/external-bin:' + dependsDir + '/cocos2d-x/cocos'
    }

    //run after commandLine executes
    doLast{

    }
}

task ndkCustomBuildRelease(type: Exec, dependsOn: ['cleanNdkLibs']) {
    //windows only
    def dependsDir = file('../../depends').absolutePath
    def cpus = Runtime.runtime.availableProcessors()
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        //windows
        commandLine 'cmd', '/c', 'ndk-build', 'NDK_DEBUG=0','V=1',  '-j', cpus, '-C', file('src/main/jni').absolutePath, 'NDK_MODULE_PATH=' + file('..').absolutePath + ';' + dependsDir + ';' + dependsDir + '\\cocos2dx-store\\submodules;' + dependsDir + '\\cocos2dx-store\\submodules\\soomla-cocos2dx-core\\submodules;' + dependsDir + '\\cocos2d-x;' + dependsDir + '\\cocos2d-x\\external;' + dependsDir + '\\cocos2d-x\\external-bin;' + dependsDir + '\\cocos2d-x\\cocos'
    } else {
        commandLine 'ndk-build', 'NDK_DEBUG=0','V=1',  '-j', cpus, '-C', file('src/main/jni').absolutePath, 'NDK_MODULE_PATH=' + file('..').absolutePath + ':' + dependsDir + ':' + dependsDir + '/cocos2dx-store/submodules:' + dependsDir + '/cocos2dx-store/submodules/soomla-cocos2dx-core/submodules:' + dependsDir + '/cocos2d-x:' + dependsDir + '/cocos2d-x/external:' + dependsDir + '/cocos2d-x/external-bin:' + dependsDir + '/cocos2d-x/cocos'
    }

    //run after commandLine executes
    doLast {

    }
}

task cleanNdkCustomBuildRelease(type: Exec) {
    //windows only
    def dependsDir = file('../../depends').absolutePath
    def cpus = Runtime.runtime.availableProcessors()

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        //windows
        commandLine 'cmd', '/c', 'ndk-build', 'NDK_DEBUG=0', 'clean', '-j', cpus, '-C', file('src/main/jni').absolutePath, 'NDK_MODULE_PATH=' + file('..').absolutePath + ';' + dependsDir + ';' + dependsDir + '\\cocos2dx-store\\submodules;' + dependsDir + '\\cocos2dx-store\\submodules\\soomla-cocos2dx-core\\submodules;' + dependsDir + '\\cocos2d-x;' + dependsDir + '\\cocos2d-x\\external;' + dependsDir + '\\cocos2d-x\\external-bin;' + dependsDir + '\\cocos2d-x\\cocos'
    } else {
        commandLine 'ndk-build', 'NDK_DEBUG=0', 'clean', '-j', cpus, '-C', file('src/main/jni').absolutePath, 'NDK_MODULE_PATH=' + file('..').absolutePath + ':' + dependsDir + ':' + dependsDir + '/cocos2dx-store/submodules:' + dependsDir + '/cocos2dx-store/submodules/soomla-cocos2dx-core/submodules:' + dependsDir + '/cocos2d-x:' + dependsDir + '/cocos2d-x/external:' + dependsDir + '/cocos2d-x/external-bin:' + dependsDir + '/cocos2d-x/cocos'
    }

    //run after commandLine executes
    doLast {

    }
}

import groovy.swing.SwingBuilder

//handling keystore password input UI
gradle.taskGraph.whenReady { taskGraph ->
    if(taskGraph.hasTask(':testapp:validateReleaseSigning')) {
        //supporting keystore in different location
        def keypath = System.getenv("KEYSTORE")
        if(keypath != null) {
            android.signingConfigs.release.storeFile = file(keypath)
        }

        //environment or interactive input of password
        def pass = System.getenv("KEYSTORE_PASSWORD")
        if(pass == null) {

            if (System.console() == null) {
                new SwingBuilder().edt {
                    dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                            title: 'Enter password', // Dialog title
                            alwaysOnTop: true, // pretty much what the name says
                            resizable: false, // Don't allow the user to resize the dialog
                            locationRelativeTo: null, // Place dialog in center of the screen
                            pack: true, // We need to pack the dialog (so it will take the size of it's children)
                            show: true // Let's show it
                    ) {
                        vbox { // Put everything below each other
                            label(text: "Please enter keystore password:")
                            input = passwordField()
                            button(defaultButton: true, text: 'OK', actionPerformed: {
                                println input.password;
                                pass = new String(input.password); // Set pass variable to value of input field
                                dispose(); // Close dialog
                            })
                        } // vbox end
                    } // dialog end
                } // edt end
            } else {
                pass = System.console().readPassword("\nPlease enter keystore password: ")
                pass = new String(pass)
            }
        }
        if(pass.size() <= 0) {
            throw new InvalidUserDataException("You must enter a password to proceed.")
        }

        android.signingConfigs.release.storePassword = pass
        android.signingConfigs.release.keyPassword = pass

    } // end if has task
} // end whenReady

task copyAssets(type: Copy) {
    from '../../Resources'
    into 'assets'
}

preBuild.dependsOn copyAssets
clean.dependsOn cleanNdkCustomBuildDebug, cleanNdkCustomBuildRelease, cleanCopyAssets

dependencies {
    compile project(':wkcocos')
    compile 'com.android.support:appcompat-v7:19.+'
}
